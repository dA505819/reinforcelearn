% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qlearning.R
\name{qlearning}
\alias{qlearning}
\title{Q-Learning (Table-lookup)}
\usage{
qlearning(envir, n.episodes = 100L, learning.rate = 0.1, epsilon = 0.1,
  epsilon.decay = 0.5, epsilon.decay.after = 100L, initial.value = 0,
  discount.factor = 1, seed = NULL)
}
\arguments{
\item{envir}{[\code{R6 class}] \cr 
The reinforcement learning environment
created by \code{\link{makeEnvironment}}.}

\item{n.episodes}{[\code{integer(1)}] \cr 
Number of episodes.}

\item{learning.rate}{[\code{numeric(1) in [0,1]}] \cr 
Learning rate (step size).}

\item{epsilon}{[\code{numeric(1) in [0,1]}] \cr 
Ratio of random exploration in 
epsilon-greedy action selection}

\item{epsilon.decay}{[\code{numeric(1) in [0,1]}] \cr 
Decay epsilon by this factor.}

\item{epsilon.decay.after}{[\code{integer(1)}] \cr
Number of episodes after which to decay epsilon.}

\item{initial.value}{[\code{numeric(1)}] \cr 
Initial values for the action 
values Q, set this to the maximal possible reward to encourage
exploration (optimistic initialization)}

\item{discount.factor}{[\code{numeric(1) in [0,1]}] \cr 
Discounting future rewards.}

\item{seed}{[\code{integer(1)}] \cr 
Random seed.}
}
\value{
[\code{list(3)}] \cr
  Returns the optimal action value function [\code{matrix}] and the 
  number of steps and rewards per episode [\code{numeric}]
}
\description{
Off-policy TD control algorithm. Q-Learning finds the optimal action value
function Q independent of the policy followed. Using an epsilon-greedy
behaviour policy states and actions are sampled. Given a state-action pair 
the optimal next action is considered by taking the max over all possible 
successor action values.
 
Under the assumption that all state-action pairs are visited (which is 
achieved using a stochastic epsilon-greedy policy) Q-Learning converges to 
the optimal action value function Q*. The update formula is: 
\deqn{Q(S, A) <- Q(S, A) + \alpha[R + \gamma max_a Q(S', a) - Q(S, A)]}
}
\examples{
# Solve the WindyGridworld environment using Q-Learning
grid = makeEnvironment(transition.array = windyGridworld$transitions,
  reward.matrix = windyGridworld$rewards,
  initial.state = 30L)
res = qlearning(grid, n.episodes = 100, seed = 123)

}
\references{
Sutton and Barto (Book draft 2017): Reinforcement Learning: An Introduction
}
\seealso{
\code{\link{sarsa}}
}
