% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qlearning2.R
\name{qlearning2}
\alias{qlearning2}
\title{Q-Learning with Function Approximation}
\usage{
qlearning2(envir, n.episodes = 10L, preprocessState = NULL,
  predict = NULL, train = NULL, predict2 = NULL, copy = NULL,
  double.qlearning = FALSE, experience.replay = FALSE,
  replay.memory = NULL, replay.memory.size = 1000L,
  initial.replay.memory.size = 1000L, batch.size = 32L, alpha = 0,
  theta = 0.01, fixed.target = FALSE, update.target.after = 100L,
  epsilon = 0.1, epsilon.decay = 0.5, epsilon.decay.after = 100L,
  discount.factor = 1, seed = NULL, ...)
}
\arguments{
\item{envir}{an R6 class: the reinforcement learning environment
created by \link{makeEnvironment}.}

\item{n.episodes}{scalar integer: number of episodes}

\item{preprocessState}{function: takes a state observation as input
and returns a preprocessed state, e.g. a one-hot vector}

\item{predict}{function: predict returns vector of q values for a
given preprocessed state observation}

\item{train}{function: train the model, update the weights}

\item{predict2}{function: predict function for the target network}

\item{copy}{function: copy model parameters to target network}

\item{double.qlearning}{logical scalar: whether to use double
qlearning}

\item{experience.replay}{logical scalar}

\item{replay.memory}{list: each list entry is a list with entries
state, action, reward, next.state. replay.memory might be filled
with experience sampled from a random policy.}

\item{replay.memory.size}{integer scalar: size of the replay memory}

\item{initial.replay.memory.size}{integer scalar: how much of the
replay memory is filled initially}

\item{batch.size}{scalar integer: batch size, how many samples are
drawn from the replay memory. Must be smaller than size of the
replay memory!}

\item{alpha}{positive scalar numeric: If alpha = 0 sampling
from replay memory will be uniform, otherwise observations with
high td error will be proportionally prioritized.}

\item{theta}{positive scalar numeric: theta is a small positive
constant that prevents the edge-case of transitions not being
revisited once their error is zero.}

\item{fixed.target}{scalar logical: Q-Learning with fixed target
network}

\item{update.target.after}{scalar integer: copy parameters to fixed
target network every n steps}

\item{epsilon}{scalar numeric: ratio of random exploration in
epsilon-greedy action selection}

\item{epsilon.decay}{scalar numeric between 0 and 1: decay epsilon
by this factor}

\item{epsilon.decay.after}{scalar integer: number of episodes afer
which to decay epsilon}

\item{discount.factor}{scalar numeric, discounting future rewards}

\item{seed}{scalar integer: random seed}

\item{...}{arguments passed on to preprocessState, predict or train}
}
\value{
list with weights and number of steps
}
\description{
Q-Learning algorithm with Experience Replay and
Fixed Target Network and Double Q-Learning.
}
\details{
To use experience replay you can
either specify an initial replay memory filled with experience
and provide the size of the replay memory. If you do not
specify a replay memory this will be initially filled with random
experience.
Double Q-Learning works right now only if \code{fixed.target == TRUE}.
}
\examples{
\dontrun{
# define the environment
grid = makeEnvironment(transition.array = windyGridworld$transitions,
  reward.matrix = windyGridworld$rewards,
  initial.state = 30L)

# Build the DQN
# define a tensorflow graph for the function approximator (here a neural network)
library(tensorflow)
tf$reset_default_graph()
inputs = tf$placeholder(tf$float32, shape(NULL, grid$n.states))
weights = tf$Variable(tf$random_uniform(shape(grid$n.states,
  grid$n.actions), 0, 0.01, seed = 1))
Q = tf$matmul(inputs, weights)
nextQ = tf$placeholder(tf$float32, shape(NULL, grid$n.actions))
loss = tf$reduce_sum(tf$square(nextQ - Q))
optimizer = tf$train$GradientDescentOptimizer(learning_rate = 0.1)
trainModel = optimizer$minimize(loss)

# initialize the session and the weights
sess = tf$Session()
sess$run(tf$global_variables_initializer())

# takes the state and returns a one-hot vector
preprocessState = function(state_) {
  one_hot = matrix(0L, nrow = length(state_), ncol = grid$n.states)
  one_hot[cbind(seq_along(state_), state_)] = 1L
  one_hot
}
# predict returns vector of q values for a given state
predict = function(inputs_) {
  sess$run(Q, feed_dict = dict(inputs = inputs_))
}
# train model, update weights, e.g. gradient descent: this is supervised learning
train = function(inputs_, outputs_, predictions_ = NULL) {
  sess$run(tuple(trainModel, weights),
    feed_dict = dict(inputs = inputs_, nextQ = outputs_))
}

# Q-Learning
res = qlearning2(grid, n.episodes = 100L,
  preprocessState, predict, train, seed = 2L)
}
}
\references{
Hasselt et al. (2015): Deep Reinforcement Learning with Double Q-Learning

Mnih et al. (2013): Playing Atari with Deep Reinforcement Learning

Schaul et al. (2016): Prioritized Experience Replay
}
\seealso{
\link{qlearning}
}
