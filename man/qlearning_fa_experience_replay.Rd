% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qlearning_experience_replay.R
\name{qlearning_fa_experience_replay}
\alias{qlearning_fa_experience_replay}
\title{Q-Learning with Function Approximation and Experience Replay}
\usage{
qlearning_fa_experience_replay(envir, makeFeatureVector, predict, train,
  replay.memory, batch.size = 32, n.episodes = 10, epsilon = 0.1,
  epsilon.decay = 0.5, discount.factor = 1, seed = NULL, ...)
}
\arguments{
\item{envir}{an R6 class: the reinforcement learning environment created by \link{makeEnvironment}.}

\item{makeFeatureVector}{function: takes a state observation
as input and returns a preprocessed state, e.g. a one-hot vector}

\item{predict}{function: predict returns vector of q values for a
given preprocessed state observation}

\item{train}{function: train the model, update the weights}

\item{replay.memory}{list: each list entry is a list with entries
state, action, reward, next.state. replay.memory might be filled
with experience sampled from a random policy.}

\item{batch.size}{scalar integer: batch size, how many samples are
drawn from the replay memory. Must be smaller than
size of the replay memory!}

\item{n.episodes}{scalar integer: the number of episodes}

\item{epsilon}{scalar numeric between 0 and 1: proportion of random samples
in epsilon-greedy behaviour policy. Higher values of epsilon lead to more
exploration.}

\item{epsilon.decay}{scalar numeric between 0 and 1: decay epsilon
every 100 episodes by multiplying with this factor}

\item{discount.factor}{scalar numeric, discounting future rewards}

\item{seed}{scalar integer: random seed}

\item{...}{arguments passed on to makeFeatureVector, predict or train}
}
\value{
list with weights
}
\description{
Q-Learning with Function Approximation and Experience Replay
}
\examples{
# define the environment
grid = WindyGridworld$new()
WindyGridworld1 = makeEnvironment(transition.array = grid$transition.array,
  reward.matrix = grid$reward.matrix,
  terminal.states = grid$terminal.states,
  initial.state = 30)

# define a tensorflow graph for the function approximator (here a neural network)
library(tensorflow)
tf$reset_default_graph()
batch.size = 32L
inputs = tf$placeholder(tf$float32, shape(NULL, WindyGridworld1$n.states))
weights = tf$Variable(tf$random_uniform(shape(WindyGridworld1$n.states,
  WindyGridworld1$n.actions), 0, 0.01))
Q = tf$matmul(inputs, weights)
nextQ = tf$placeholder(tf$float32, shape(NULL, WindyGridworld1$n.actions))
loss = tf$reduce_sum(tf$square(nextQ - Q))
optimizer = tf$train$GradientDescentOptimizer(learning_rate = 0.1)
trainModel = optimizer$minimize(loss)

# initialize the session and the weights
sess = tf$Session()
sess$run(tf$global_variables_initializer())

# takes the state and returns a one-hot vector
makeFeatureVector = function(state_) {
  one_hot = matrix(0L, nrow = length(state_), ncol = WindyGridworld1$n.states)
  one_hot[cbind(seq_along(state_), state_)] = 1L
  one_hot
}

# predict returns vector of q values for a given state
predict = function(inputs_) {
  sess$run(Q, feed_dict = dict(inputs = inputs_))
}

# train model, update weights, e.g. gradient descent: this is supervised learning
train = function(inputs_, outputs_, predictions_ = NULL) {
  sess$run(tuple(trainModel, weights),
    feed_dict = dict(inputs = inputs_, nextQ = outputs_))
}

# define replay.memory
replay.memory.size = 10000 # steps
replay.memory = vector("list", length = replay.memory.size)

# fill this initially with experience generated by random policy
WindyGridworld1$reset()
for (i in 1:replay.memory.size) {
  state = WindyGridworld1$state
  action = sample(0:3, 1)
  WindyGridworld1$step(action)
  replay.memory[[i]] <- list(action = action, reward = WindyGridworld1$reward,
    state = state, next.state = WindyGridworld1$state)
  if (WindyGridworld1$episode.over == TRUE) {
    print(i)
    WindyGridworld1$reset()
  }
}

res = qlearning_fa_experience_replay(WindyGridworld1, makeFeatureVector,
  predict, train, replay.memory, n.episodes = 100, seed = 123)

}
\seealso{
\link{qlearning_fa}
}
