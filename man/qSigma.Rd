% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qSigma.R
\name{qSigma}
\alias{qSigma}
\title{Q(sigma) (Table-lookup)}
\usage{
qSigma(envir, sigma = 1, lambda = 0, n.episodes = 100,
  learning.rate = 0.1, epsilon = 0.1, epsilon.decay = 0.5,
  epsilon.decay.after = 100L, initial.value = 0L, discount.factor = 1,
  seed = NULL)
}
\arguments{
\item{envir}{[\code{R6 class}] \cr 
The reinforcement learning environment
created by \code{\link{makeEnvironment}}.}

\item{sigma}{[\code{numeric(1) in [0,1]}] \cr 
Sampling parameter, for \code{sigma = 0} the 
sarsa algorithm is obtained, for \code{sigma = 1} expected sarsa.}

\item{lambda}{[\code{numeric(1) in [0, 1]}] \cr 
Then \code{lambda = 0} only current state is updated 
(this is equivalent to TD(0)), for \code{lambda = 1} 
all states visited are updated, this is roughly equivalent to 
every-visit Monte Carlo.}

\item{n.episodes}{[\code{integer(1)}] \cr 
Number of episodes.}

\item{learning.rate}{[\code{numeric(1) in [0,1]}] \cr 
Learning rate (step size).}

\item{epsilon}{[\code{numeric(1) in [0,1]}] \cr 
Ratio of random exploration in 
epsilon-greedy action selection}

\item{epsilon.decay}{[\code{numeric(1) in [0,1]}] \cr 
Decay epsilon by this factor.}

\item{epsilon.decay.after}{[\code{numeric(1)}] \cr
Number of episodes after which to decay epsilon.}

\item{initial.value}{[\code{numeric(1)}] \cr 
Initial values for the action 
values Q, set this to the maximal possible reward to encourage
exploration (optimistic initialization)}

\item{discount.factor}{[\code{numeric(1) in [0,1]}] \cr 
Discounting future rewards.}

\item{seed}{[\code{integer(1)}] \cr 
Random seed.}
}
\value{
[\code{list(3)}] \cr
  Returns the optimal action value function [\code{matrix}] and the 
  number of steps and rewards per episode [\code{numeric}]
}
\description{
Q(sigma) is a generalization of Sarsa and Expected Sarsa algorithms.
}
\examples{
grid = makeEnvironment(transition.array = windyGridworld$transitions,
  reward.matrix = windyGridworld$rewards,
  initial.state = 30L)
res = qSigma(grid, n.episodes = 100, seed = 123)

}
\references{
De Asis et al. (2017): Multi-step Reinforcement Learning: A Unifying Algorithm
}
\seealso{
\code{\link{sarsa}}

\code{\link{qlearning}}
}
