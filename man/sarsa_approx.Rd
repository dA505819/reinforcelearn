% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sarsa_approx.R
\name{sarsa_approx}
\alias{sarsa_approx}
\title{SARSA with linear function approximation}
\usage{
sarsa_approx(envir, make_feature_vector, n.features, lambda = 0,
  n.episodes = 10, max.steps.episode = 200, alpha = 0.1, epsilon = 0.1,
  discount.factor = 1, render = TRUE, seed = NULL, ...)
}
\arguments{
\item{envir}{the environment, an R6 class. See also \code{\link[=envir]{envir()}}.}

\item{make_feature_vector}{function which produces a feature vector for a given state observation.}

\item{n.features}{integer scalar: number of features}

\item{lambda}{scalar numeric in (0, 1): Then lambda = 0 only current state
is updated (this is equivalent to TD(0)), for lambda = 1 all states visited
are updated, this is roughly equivalent to every-visit Monte Carlo.}

\item{n.episodes}{scalar integer: the number of episodes}

\item{max.steps.episode}{number of steps maximal allowed per episode}

\item{alpha}{scalar numeric between 0 and 1: weighting factor in the
incremental mean update. Useful in non-stationary environments, giving high
value to the last observed returns.}

\item{epsilon}{scalar numeric between 0 and 1: proportion of random samples
in epsilon-greedy behaviour policy. Higher values of epsilon lead to more exploration.}

\item{discount.factor}{scalar numeric, discounting future rewards}

\item{render}{logical scalar: should the environment be rendered}

\item{seed}{scalar integer: random seed}

\item{...}{arguments passed to make_feature_vector}
}
\value{
Numeric matrix of weights. Number of weights is number of features x number of actions
}
\description{
SARSA(0) implemented. Function approximation using linear tiles.
}
\examples{
\dontrun{
# Make sure you have gym-http-api and python installed.
# Then start a server from command line by running: python gym_http_server.py
mcar = mountainCar$new()

weights = sarsa_approx(mcar, make_feature_vector, n.features = 10, 
  state.space.bounds = mcar$state.space.bounds, n.grid = 10, n.episodes = 10, 
  render = TRUE)
}

}
